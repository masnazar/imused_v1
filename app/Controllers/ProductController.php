<?php

namespace App\Controllers;

use App\Models\ProductModel;
use App\Models\BrandModel;
use App\Models\SupplierModel;
use CodeIgniter\Controller;

class ProductController extends Controller
{
    // Menampilkan halaman index produk
    public function index()
    {
        return view('products/index');
    }

    // Menampilkan form untuk menambahkan produk baru
    public function create()
    {
        $brandModel = new BrandModel();
        $supplierModel = new SupplierModel();

        $data = [
            'brands' => $brandModel->findAll(),
            'suppliers' => $supplierModel->findAll(),
            'autoGeneratedCode' => 'PROD-' . strtoupper(uniqid())
        ];

        return view('products/create', $data);
    }

    // Menyimpan data produk baru
    public function store()
    {
        $productModel = new ProductModel();
        $validation = \Config\Services::validation();

        // Validasi input
        $validation->setRules([
            'product_name'     => 'required|min_length[3]',
            'product_sku'      => 'required|alpha_numeric|min_length[2]',
            'hpp'              => 'required|numeric',
            'hpp_penjualan'    => 'required|numeric',
            'stok'             => 'required|integer|greater_than_equal_to[0]',
            'brand_id'         => 'required|integer',
            'supplier_id'      => 'required|integer',
            'bpom_number'      => 'permit_empty|alpha_numeric|min_length[5]'
        ]);

        if (!$validation->withRequest($this->request)->run()) {
            return redirect()->back()->withInput()->with('errors', $validation->getErrors())
                            ->with('swal_error', 'Gagal menambahkan produk. Silakan periksa input Anda.');
        }

        $productModel->save([
            'product_name'     => $this->request->getPost('product_name'),
            'product_code'     => 'PROD-' . strtoupper(uniqid()),
            'product_sku'      => $this->request->getPost('product_sku'),
            'hpp'              => $this->request->getPost('hpp'),
            'hpp_penjualan'    => $this->request->getPost('hpp_penjualan'),
            'stok'             => $this->request->getPost('stok'),
            'brand_id'         => $this->request->getPost('brand_id'),
            'supplier_id'      => $this->request->getPost('supplier_id'),
            'bpom_number'      => $this->request->getPost('bpom_number'),
        ]);

        return redirect()->to('/products')->with('swal_success', 'Produk berhasil ditambahkan.');
    }

    // Menampilkan form edit produk
    public function edit($id)
    {
        $productModel = new ProductModel();
        $brandModel = new BrandModel();
        $supplierModel = new SupplierModel();

        $data = [
            'product'   => $productModel->find($id),
            'brands'    => $brandModel->findAll(),
            'suppliers' => $supplierModel->findAll()
        ];

        return view('products/edit', $data);
    }

    // Memperbarui data produk
    public function update($id)
    {
        $productModel = new ProductModel();
        $validation = \Config\Services::validation();

        $validation->setRules([
            'product_name'     => 'required|min_length[3]',
            'product_sku'      => 'required|alpha_numeric|min_length[2]',
            'hpp'              => 'required|numeric',
            'hpp_penjualan'    => 'required|numeric',
            'stok'             => 'required|integer|greater_than_equal_to[0]',
            'brand_id'         => 'required|integer',
            'supplier_id'      => 'required|integer',
            'bpom_number'      => 'permit_empty|alpha_numeric|min_length[5]'
        ]);

        if (!$validation->withRequest($this->request)->run()) {
            return redirect()->back()->withInput()->with('errors', $validation->getErrors())
                            ->with('swal_error', 'Gagal memperbarui produk. Silakan periksa input Anda.');
        }

        $productModel->update($id, [
            'product_name'     => $this->request->getPost('product_name'),
            'product_code'     => $this->request->getPost('product_code'),
            'product_sku'      => $this->request->getPost('product_sku'),
            'hpp'              => $this->request->getPost('hpp'),
            'hpp_penjualan'    => $this->request->getPost('hpp_penjualan'),
            'stok'             => $this->request->getPost('stok'),
            'brand_id'         => $this->request->getPost('brand_id'),
            'supplier_id'      => $this->request->getPost('supplier_id'),
            'bpom_number'      => $this->request->getPost('bpom_number')
        ]);

        return redirect()->to('/products')->with('swal_success', 'Produk berhasil diperbarui.');
    }

    // Menghapus produk
    public function delete($id)
    {
        $productModel = new ProductModel();
        $productModel->delete($id);

        return redirect()->to('/products')->with('swal_success', 'Produk berhasil dihapus.');
    }

    // Server-side processing untuk DataTables
    public function getProducts()
    {
        $model = new ProductModel();
        $request = service('request');

        // Ambil parameter DataTables
        $search = $request->getVar('search')['value'] ?? '';
        $start = (int)($request->getVar('start') ?? 0);
        $length = (int)($request->getVar('length') ?? 10);
        $orderColumnIndex = $request->getVar('order')[0]['column'] ?? 0;
        $orderDir = $request->getVar('order')[0]['dir'] ?? 'asc';

        // Sesuaikan kolom dengan DataTables
        $columns = ['product_name', 'brand_name', 'product_code', 'product_sku', 'hpp', 'hpp_penjualan', 'stok', 'bpom_number', 'supplier_name'];
        $orderColumn = $columns[$orderColumnIndex] ?? 'id';

        // Ambil data dari model
        $totalData = $model->countAllData();
        $totalFiltered = $model->countFilteredData($search);
        $data = $model->getDataTables($search, $start, $length, $orderColumn, $orderDir);

        foreach ($data as &$row) {
            $row['actions'] = '
                <div class="dropdown">
                    <button class="btn btn-light btn-sm dropdown-toggle" type="button" id="dropdownMenuButton' . $row['id'] . '" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="ri-more-2-fill"></i>
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton' . $row['id'] . '">
                        <li><a class="dropdown-item" href="' . base_url('products/edit/' . $row['id']) . '">Edit</a></li>
                        <li><a class="dropdown-item text-danger delete-product" href="' . base_url('products/delete/' . $row['id']) . '">Hapus</a></li>
                    </ul>
                </div>';
        }

        // Format DataTables
        $result = [
            "draw" => intval($request->getVar('draw')),
            "recordsTotal" => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data" => $data
        ];

        return $this->response->setJSON($result);
    }
}
